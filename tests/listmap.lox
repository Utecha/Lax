class ListNode {
    init(value) {
        self.value = value;
        self.next = nil;
        self.previous = nil;
    }
}

class List {
    init() {
        self.head = nil;
        self.tail = nil;
        self._length = 0;
    }

    // Append a value to the end of the list
    append(value) {
        var node = ListNode(value);
        if (self.head == nil) {
            self.head = node;
            self.tail = node;
        } else {
            node.previous = self.tail;
            self.tail.next = node;
            self.tail = node;
        }

        self._length = self._length + 1;
        return self;
    }

    // Pop the last value of the list. Do nothing
    // if the list is empty.
    pop() {
        if (self.tail == nil) {
            return;
        }

        var node = self.tail;
        var previous = node.previous;
        self.tail = previous;
        if (previous != nil) {
            previous.next = nil;
        } else {
            self.head = nil;
        }
        self._length = self._length - 1;
        return node.value;
    }

    // Call f(value) for each value in the list, from
    // first value appended to last. If 'f' returns a
    // truthy value, stop iterating.
    foreach(f) {
        var node = self.head;
        while (node != nil) {
            if (f(node.value)) {
                return;
            }

            node = node.next;
        }
    }

    // Get the nth (0-based) element of the list.
    // Because it's a linked list (Lox doesn't have
    // arrays), this is an 0(n) operation.
    get(n) {
        var node = self.head;
        var i = 0;
        while (node != nil) {
            if (i == n) {
                return node.value;
            }
            node = node.next;
            i = i + 1;
        }

        return nil;
    }

    // Return the length of the list. The length is
    // tracked as the list is appended to, so this
    // is an 0(1) operation.
    length() {
        return self._length;
    }

    // Return the last element, or nil if the list is
    // empty.
    last() {
        if (self.tail != nil) {
            return self.tail.value;
        }

        return nil;
    }
}

class MapItem {
    init(key, value) {
        self.key = key;
        self.value = value;
    }
}

class Map {
    init() {
        self.items = List();
    }

    // Look for given key in map, return MapItem or nil.
    find(key) {
        var found;
        fun findItem(item) {
            if (item.key == key) {
                found = item;
                // Exit foreach loop early after finding it
                return true;
            }

            return false;
        }

        self.items.foreach(findItem);
        return found;
    }

    // Look for the given key in the map
    get(key) {
        var item = self.find(key);
        if (item != nil) {
            return item.value;
        }

        return nil;
    }

    // Set given key to value in the map. Overwrite if an item
    // with the given key already exists.
    set(key, value) {
        var item = self.find(key);
        if (item != nil) {
            item.value = value;
        } else {
            self.items.append(MapItem(key, value));
        }
    }
}

var list = List();
list.append("String 1");
list.append("String 2");
list.append("String 3");
list.append("String 4");
list.append("String 5");

for (var i = 0; i < list._length; i = i + 1) {
    print list.get(i);
}
